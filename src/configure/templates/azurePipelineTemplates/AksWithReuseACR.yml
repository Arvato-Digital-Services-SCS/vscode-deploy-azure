# Docker image, Azure Container Registry, and Azure Kubernetes Service
# Build a Docker image, push it to an Azure Container Registry, and deploy it to Azure Kubernetes Service.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # ========================================================================
  #                          Mandatory variables
  # ========================================================================

  # Update Azure.ServiceConnectionId value with AzureRm service endpoint.
  Azure.ServiceConnectionId: '{{ targetResource.serviceConnectionId }}'

  dockerRegistryServiceConnection: '{{ pipelineParameters.params.containerRegistryConnection.Id }}'

  containerRegistry: '{{ pipelineParameters.params.containerRegistryConnection.Authorization.Parameters.loginServer }}'

  imageRepository: '{{=<% %>=}}{{#toAlphaNumericString imageRepository 50}}{{/toAlphaNumericString}}<%={{ }}=%>'

  tag: '$(Build.BuildId)'

  # Update ACR.Name value with ACR name. Please note ACR names should be all lower-case and alphanumeric only.
  ACR.Name: '{{ pipelineParameters.params.acr.name }}'

  # Update AKS.ClusterName value Azure kubernetes cluster name.
  AKS.ClusterName: '{{ pipelineParameters.params.targetResource.name }}'

  # Docker Container port
  Container.Port: 5000

  imagePullSecret: '{{=<% %>=}}{{#toAlphaNumericString pipelineParameters.params.acr.name 50}}{{/toAlphaNumericString}}{{#shortGuid}}{{/shortGuid}}-auth<%={{ }}=%>'

  # ========================================================================
  #                           Optional variables
  # ========================================================================

  ACR.RepositoryName: '$(ACR.Name)'
  ACR.ImageName: '$(ACR.Name):$(Build.BuildId)'
  ACR.FullName: '$(ACR.Name).azurecr.io'
  ACR.Sku: 'Standard'
  AKS.KubeDeploymentYaml: '' # Update AKS.KubeDeploymentYaml if you want to use deployment file from repo instead of generated file.
  AKS.DeploymentPort: '$(Container.Port)'
  Azure.CreateResources: 'false' # Update Azure.CreateResources to false if you have already created resources like resource group, azure container registry and azure kubernetes cluster.
  System.Debug: 'false'

jobs:

- job: BuildImage
  displayName: Build

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Docker@1
    displayName: 'Build an image'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureContainerRegistry: '$(ACR.FullName)'
      imageName: '$(ACR.ImageName)'
      command: build
      dockerFile: '**/Dockerfile'

  - task: Docker@1
    displayName: 'Push an image'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureContainerRegistry: '$(ACR.FullName)'
      imageName: '$(ACR.ImageName)'
      command: push

- job: DeployApp
  displayName: Deploy
  dependsOn: BuildImage
  condition: succeeded()

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - bash: |
      if [ -f $(AKS.KubeDeploymentYaml) ]; then
        echo "##vso[task.setvariable variable=AKS.KubeDeploymentYamlExists;]true"
      else
        echo "##vso[task.setvariable variable=AKS.KubeDeploymentYamlExists;]false"
      fi
    displayName: 'Check kubernetes deployment yaml exists'

  - bash: |
       echo "apiVersion : apps/v1beta1
       kind: Deployment
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         replicas: 1
         template:
           metadata:
             labels:
               app: $(ACR.RepositoryName)
           spec:
             containers:
             - name: $(ACR.RepositoryName)
               image: $(ACR.FullName)/$(ACR.ImageName)
               ports:
               - containerPort: $(AKS.DeploymentPort)
       ---
       apiVersion: v1
       kind: Service
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         type: LoadBalancer
         ports:
         - port: $(AKS.DeploymentPort)
         selector:
           app: $(ACR.RepositoryName)" > $(AKS.KubeDeploymentYaml)
    displayName: 'Generate kubernetes deployment yaml'
    condition: and(succeeded(), eq(variables['AKS.KubeDeploymentYamlExists'], 'False'))


  - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

  - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(AKS.KubeDeploymentYaml)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
